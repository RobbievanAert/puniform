{
    "contents" : "esest <- function(yi, vi, zval, zcv, ksig, method) {\n\n  bo <- bounds(yi = yi, vi = vi, zval = zval, zcv = zcv, ext = FALSE)\n  bo.ext <- bounds(yi = yi, vi = vi, zval = zval, zcv = zcv, ext = TRUE)\n\n  pdist <- function(d, yi, vi, zval, zcv, ksig, val, method, cv.P) {\n    zd <- d/sqrt(vi)\n    q <- numeric(ksig)\n    for(i in 1:length(yi)) {\n      if(zcv[i] - zd[i] <= 38) {\n        pmarg <- exp(pnorm(zcv[i]*sqrt(vi[i]), mean = d, sd = sqrt(vi[i]), lower.tail = FALSE, log.p = TRUE))\n        ph1 <- exp(pnorm(yi[i], mean = d, sd = sqrt(vi[i]), lower.tail = FALSE, log.p = TRUE))\n        q[i] <- ph1/pmarg\n      } else {\n        q[i] <- approx(zd[i], zval[i], zcv[i])\n      }\n    }\n    if(val == \"est\") { tr.q <<- q }\n    if(method == \"LNP\") { stat <- sum(-log(q)) }\n    else if(method == \"LN1MINP\") { stat <- sum(-log(1 - q)) }\n    else if(method == \"P\") { stat <- sum(q) }\n    else if(method == \"KS\" & val == \"est\") { out <- ks.test(x = q, y = punif)$statistic }\n    else if(method == \"AD\" & val == \"est\") { out <- as.numeric(ADGofTest::ad.test(x = q, distr.fun = punif)$statistic) }\n    if(val == \"est\" & (method == \"LNP\" | method == \"LN1MINP\" | method == \"P\")) { out <- stat - ksig }\n    else if(val == \"ci.lb\" & (method == \"LNP\" | method == \"LN1MINP\")) { out <- stat - qgamma(.975, ksig, 1) }\n    else if(val == \"ci.ub\" & (method == \"LNP\" | method == \"LN1MINP\")) { out <- stat - qgamma(.025, ksig, 1) }\n    else if(val == \"ci.ub\" & method == \"P\") { out <- stat - cv.P }\n    else if(val == \"ci.lb\" & method == \"P\") { out <- stat - cv.P }\n    out\n  }\n\n  if(method == \"KS\" | method == \"AD\") {\n    ci.lb <- NA\n    ci.ub <- NA\n    approx.ci.lb <- 0\n    approx.ci.ub <- 0\n    if(method == \"KS\") {\n      est.bo <- try(bisect(func = pdist, lo = bo[1], hi = bo[2], yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig/2, val = \"est\", method = \"P\"), silent = TRUE)\n      if(class(est.bo) == \"try-error\") {\n        est.bo <- bisect(func = pdist, lo = bo.ext[1], hi = bo.ext[2], yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig/2, val = \"est\", method = \"P\")\n      }\n      est <- try(as.numeric(optimize(pdist, interval = c(est.bo-1.5, est.bo+1.5), yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig, val = \"est\", method = method)$minimum), silent = TRUE)\n      if(class(est) == \"try-error\") { est <- NA }\n    }\n    if(method == \"AD\") {\n      est.AD <- nlm(pdist, p = 0, yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig, val = \"est\", method = method)\n      if(est.AD$gradient < 0.1) { est <- est.AD$estimate\n      } else { est <- NA }\n    }\n    if(any(is.na(est) == FALSE & any(zcv - est/sqrt(vi) > 38))) { approx.est <- 1\n    } else { approx.est <- 0 }\n\n  } else {\n    if(method == \"P\") {\n      ksig.est <- ksig/2\n    } else { ksig.est <- ksig }\n    approx.est <- 0\n    est <- try(bisect(func = pdist, lo = bo[1], hi = bo[2], yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig.est, val = \"est\", method = method), silent = TRUE)\n    if(class(est) == \"try-error\") {\n      approx.est <- 1\n      est <- try(bisect(func = pdist, lo = bo.ext[1], hi = bo.ext[2], yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig.est, val = \"est\", method = method), silent = TRUE)\n      if(class(est) == \"try-error\") { est <- NA }\n    }\n\n    if(method == \"P\") {\n      approx.ci.lb <- 0\n      ci.lb <- try(bisect(func = pdist, lo = bo[1], hi = est, yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig, val = \"ci.lb\", method = method, cv.P = get.cv.P(ksig)), silent = TRUE)\n      if(class(ci.lb) == \"try-error\") {\n        approx.ci.lb <- 1\n        ci.lb <- try(bisect(func = pdist, lo = bo.ext[1], hi = est, yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig, val = \"ci.lb\", method = method, cv.P = get.cv.P(ksig)), silent = TRUE)\n        if(class(ci.lb) == \"try-error\") { ci.lb <- NA }\n      }\n    } else if(method == \"LN1MINP\") {\n      approx.ci.lb <- 0\n      ci.lb <- try(bisect(func = pdist, lo = bo[1], hi = est, yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig, val = \"ci.ub\", method = method), silent = TRUE)\n      if(class(ci.lb) == \"try-error\") {\n        approx.ci.lb <- 1\n        ci.lb <- try(bisect(func = pdist, lo = bo.ext[1], hi = est, yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig, val = \"ci.ub\", method = method), silent = TRUE)\n        if(class(ci.lb) == \"try-error\") { ci.lb <- NA }\n      }\n    } else {\n      approx.ci.lb <- 0\n      ci.lb <- try(bisect(func = pdist, lo = bo[1], hi = est, yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig, val = \"ci.lb\", method = method), silent = TRUE)\n      if(class(ci.lb) == \"try-error\") {\n        approx.ci.lb <- 1\n        ci.lb <- try(bisect(func = pdist, lo = bo.ext[1], hi = est, yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig, val = \"ci.lb\", method = method), silent = TRUE)\n        if(class(ci.lb) == \"try-error\") { ci.lb <- NA }\n      }\n    }\n\n    if(method == \"P\") {\n      ci.ub <- try(bisect(func = pdist, lo = est, hi = bo[2], yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig, val = \"ci.ub\", method = method, cv.P = ksig-get.cv.P(ksig)), silent = TRUE)\n      if(class(ci.ub) == \"try-error\") { ci.ub <- NA }\n    } else if(method == \"LN1MINP\") {\n      if(is.na(est) == TRUE) {\n        ci.ub <- try(bisect(func = pdist, lo = bo[1], hi = bo[2], yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig, val = \"ci.lb\", method = method), silent = TRUE)\n      } else {\n        ci.ub <- try(bisect(func = pdist, lo = est, hi = bo[2], yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig, val = \"ci.lb\", method = method), silent = TRUE)\n      }\n    } else if(is.na(est) == TRUE) {\n      ci.ub <- try(bisect(func = pdist, lo = bo[1], hi = bo[2], yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig, val = \"ci.ub\", method = method), silent = TRUE)\n    } else {\n      ci.ub <- try(bisect(func = pdist, lo = est, hi = bo[2], yi = yi, vi = vi, zval = zval, zcv = zcv, ksig = ksig, val = \"ci.ub\", method = method), silent = TRUE)\n    }\n    if(class(ci.ub) == \"try-error\") { ci.ub <- NA }\n  }\n\n  return(list(est = est, ci.lb = ci.lb, ci.ub = ci.ub, approx.est = max(approx.est), approx.ci.lb = max(approx.ci.lb), ext.lb = bo.ext[1], tr.q = tr.q))\n}\n",
    "created" : 1435345065470.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "600218571",
    "id" : "919B5D35",
    "lastKnownWriteTime" : 1435324828,
    "path" : "C:/Dropbox/Werk/Onderzoek/Code/puniform/R/GIT_esest_2.R",
    "project_path" : "R/GIT_esest_2.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}