{
    "contents" : "#####################################################################\n##### PUNIFORM FUNCTION FOR APPLYING THE P-UNIFORM METHOD FOR:  #####\n##### - ONE GROUP AND UNKNOWN SIGMA                             #####\n##### - TWO GROUPS AND UNKNOWN SIGMA                            #####\n##### - CORRELATION COEFFICIENT                                 #####\n#####################################################################\n\npuniform <- function(mi, ri, ni, sdi, m1i, m2i, n1i, n2i, sd1i, sd2i, tobs, alpha = .05, side, method, plot = FALSE, sim.pval = FALSE) {\n  \n  ##### LOAD PACKAGES #####\n  require(ADGofTest)\n  require(truncnorm)\n  \n  ##### LOAD FUNCTIONS #####\n  source(\"D:/Dropbox/Werk/Onderzoek/Code/Program Files/escompute_3.R\")         ### Computing effect sizes\n  \n  source(\"D:/Dropbox/Werk/Onderzoek/Code/Program Files/pubbias_4.R\")           ### Publication bias test p-uniform\n  source(\"D:/Dropbox/Werk/Onderzoek/Code/approx.R\")                            ### Computing extreme tail probabilities\n  \n  source(\"D:/Dropbox/Werk/Onderzoek/Code/Program Files/testeffect_2.R\")        ### Test of an effect p-uniform\n  \n  source(\"D:/Dropbox/Werk/Onderzoek/Code/Program Files/esest_2.R\")             ### Effect size estimation p-uniform\n  source(\"D:/Dropbox/Werk/Onderzoek/Code/bounds.R\")                            ### Computing bounds for effect size estimation\n  source(\"D:/Dropbox/Werk/Onderzoek/Code/bisect.R\")                            ### Bisection method\n  source(\"D:/Dropbox/Werk/Onderzoek/Code/get.cv.P.R\")                          ### Critical values Irwin-Hall distribution\n  \n  source(\"D:/Dropbox/Werk/Onderzoek/Code/Program Files/plottrans.R\")           ### Plot p-values\n  \n  source(\"D:/Dropbox/Werk/Onderzoek/Code/Program Files/hetero.R\")              ### Test for homogeneity\n  \n  source(\"D:/Dropbox/Werk/Onderzoek/Code/Program Files/print.puniformoutput_2.R\")### Create output class\n  \n  source(\"D:/Dropbox/Werk/Onderzoek/Code/Program Files/transform_1.R\")           ### Transform results\n  \n  ##### COMPUTE EFFECT SIZE, VARIANCE, AND Z-VALUES PER STUDY #####\n  if (!missing(\"mi\") & !missing(\"ni\") & !missing(\"sdi\")) {\n    measure <- \"M\"\n    es <- escompute(mi = mi, ni = ni, sdi = sdi, alpha = alpha/2, side = side, measure = measure) ### Mean unknown sigma\n  } else if (!missing(\"ni\") & !missing(\"tobs\")) {\n    measure <- \"MT\"\n    es <- escompute(ni = ni, tobs = tobs, alpha = alpha/2, side = side, measure = measure)\n  } else if (!missing(\"m1i\") & !missing(\"m2i\") & !missing(\"n1i\") & !missing(\"n2i\") & !missing(\"sd1i\") & !missing(\"sd2i\")) {\n    measure <- \"MD\"\n    es <- escompute(m1i = m1i, m2i = m2i, n1i = n1i, n2i = n2i, sd1i = sd1i, sd2i = sd2i, alpha = alpha/2, side = side, measure = measure) ### Mean difference unknown sigma\n  } else if (!missing(\"n1i\") & !missing(\"n2i\") & !missing(\"tobs\")) {\n    measure <- \"MDT\"\n    es <- escompute(n1i = n1i, n2i = n2i, tobs = tobs, alpha = alpha/2, side = side, measure = measure) ### Mean difference unknown sigma with observed t-value\n  } else if (!missing(\"ri\") & !missing(\"ni\")) {\n    measure <- \"COR\"\n    es <- escompute(ri = ri, ni = ni, alpha = alpha/2, side = side, measure = measure) ### Correlation\n  }\n  \n  ##### PUBLICATION BIAS TEST #####\n  res1 <- pubbias(es = es, alpha = alpha/2, method = method)\n  \n  ### If there are no significant studies return an error message\n  if(res1$ksig == 0) {\n    stop(\"No significant studies on the specified side\")\n  }\n  \n  ##### TEST OF AN EFFECT #####\n  res2 <- testeffect(zval = res1$data$zval, zcv = res1$data$zcv, ksig = res1$ksig, method = method)\n  \n  ##### EFFECT SIZE ESTIMATION #####\n  res3 <- esest(yi = res1$data$yi, vi = res1$data$vi, zval = res1$data$zval, zcv = res1$data$zcv, ksig = res1$ksig, method = method)\n  \n  ##### PLOT ILLUSTRATING RELATIONSHIP BETWEEN OBSERVED AND EXPECTED P-VALUES #####\n  if(plot == TRUE) { plottrans(tr.q = res3$tr.q, ksig = res1$ksig) }\n  \n  ##### TEST FOR HOMOGENEITY #####\n  res4 <- hetero(vi = res1$data$vi, est = res3$est, ksig = res1$ksig, tr.q = res3$tr.q, alpha = alpha/2, method = method, sim.pval = sim.pval)\n  \n  ##### MIRROR OR TRANSFORM RESULTS #####\n  res5 <- transform(res1 = res1, res3 = res3, side = side, measure = measure)\n  \n  ##### CREATE OUTPUT #####\n  x <- list(method = method, est = res5$est, ci.lb = res5$ci.lb, ci.ub = res5$ci.ub, ksig = res1$ksig, approx.est = res3$approx.est,\n            approx.ci.lb = res3$approx.ci.lb, ext.lb = res3$ext.lb, L.het = res4$L.het, pval.het = res4$pval.het, cor.pval = res4$cor.pval,\n            L.0 = res2$L.0, pval.0 = res2$pval.0, approx.0.imp = res2$approx.0.imp, L.pb = res1$L.pb, pval.pb = res1$pval.pb,\n            approx.pb = res1$approx.pb, est.fe = res5$est.fe, se.fe = res5$se.fe, zval.fe = res5$zval.fe, pval.fe = res1$pval.fe, ci.lb.fe = res5$ci.lb.fe, \n            ci.ub.fe = res5$ci.ub.fe, Qstat = res1$Qstat, Qpval = res1$Qpval)\n  \n  class(x) <- \"puniformoutput\"\n  return(x)\n  \n}\n\n# puniform(mi = c(-0.2,-0.2), ni = c(100,100), sdi = c(1,1), alpha = 0.05, method = \"P\", sim.pval = FALSE, plot = FALSE, side = \"left\")\n# puniform(mi = c(0.2,0.2), ni = c(100,100), sdi = c(1,1), alpha = 0.05, method = \"P\", plot = FALSE, side = \"right\")\n# \n# \n# puniform(mi = c(-0.2,-0.2), ni = c(100,100), sdi = c(1,1), alpha = 0.05, method = \"P\", sim.pval = FALSE, plot = FALSE, side = \"left\")\n# \n# puniform(ri = c(-0.2,-0.2), ni = c(100,100), alpha = 0.05, method = \"P\", sim.pval = FALSE, plot = FALSE, side = \"left\")\n# \n# \n# n1i <- 50\n# n2i <- 50\n# m1i <- qt(0.0125, df = n1i+n2i-2, lower.tail = FALSE)*sqrt(2/n1i)\n# m2i <- 0\n# sd1i <- 1\n# sd2i <- 1\n# alpha <- 0.05\n# side <- \"right\"\n# method <- \"P\"\n# \n# ### Compute sampling variance, z-value, and critical z-value\n# s.pool <- sqrt(((n1i-1)*sd1i^2 + (n2i-1)*sd2i^2)/(n1i+n2i-2))\n# ### Compute p-value as done in original studies\n# tobs <- (m1i - m2i)/sqrt(s.pool*(1/n1i+1/n2i))\n# pval <- pt(tobs, df = n1i+n2i-2, lower.tail = FALSE)\n# pval\n# \n# ni <- 50\n# mi <- qt(0.0125, df = ni-1, lower.tail = FALSE)*(1/sqrt(ni))\n# sdi <- 1\n# alpha <- 0.05\n# side <- \"right\"\n# method <- \"P\"\n# tobs <- qt(0.0125, df = ni-1, lower.tail = FALSE)\n# \n# puniform(mi = mi, ni = ni, sdi = sdi, alpha = 0.05, method = \"P\", sim.pval = FALSE, plot = FALSE, side = \"right\")\n# puniform(tobs = -tobs, ni = ni, alpha = 0.05, method = \"P\", sim.pval = FALSE, plot = FALSE, side = \"left\")\n# \n# \n# res <- puniform(m1i = m1i, m2i = m2i, n1i = n1i, n2i = n2i, sd1i = sd1i, sd2i = sd2i, alpha = 0.05, method = method, sim.pval = FALSE, plot = FALSE, side = \"right\")\n# res\n# res$approx.est\n# puniform(m1i = m1i, m2i = m2i, n1i = n1i, n2i = n2i, sd1i = sd1i, sd2i = sd2i, alpha = 0.05, method = \"P\", sim.pval = FALSE, plot = FALSE, side = \"right\")\n# puniform.TEST(n1i = n1i, n2i = n2i, tobs = tobs, alpha = 0.05, method = \"P\", sim.pval = FALSE, plot = FALSE, side = \"right\")",
    "created" : 1435344496841.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1484621450",
    "id" : "7361D3C6",
    "lastKnownWriteTime" : 1435328363,
    "path" : "C:/Dropbox/Werk/Onderzoek/Code/Program Files/puniform_compleet_9.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}